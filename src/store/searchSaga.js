import {call, put, select, takeEvery, takeLatest} from 'redux-saga/effects';
import {URL_API} from '../api/const';
import axios from 'axios';
import {SEARCH_REQUEST, searchRequesError, searchRequestSuccess} from './search/searchAction';

// const fetchSearch = async (searchText, token) => {
//   const url = `${URL_API}/search?q=${searchText}&limit=3`;
//   console.log(`token:${token.length} fetchSearch: url`, url);
//   const request = await axios(url,
//     {
//       headers: {
//         Authorization: `bearer ${token}`,
//       },
//     }
//   );
//   return request;
// };
// üëá –¥–ª—è // const data = yield fetchSearch(action);
// const fetchSearch = async (action) => {
//   const url = `${URL_API}/search?q=${action.searchText}&limit=3`;
//   console.log(`token:${action.token.length} fetchSearch: url`, url);
//   const request = await axios(url,
//     {
//       headers: {
//         Authorization: `bearer ${action.token}`,
//       },
//     }
//   );
//   return request.data;
// };

function* workerSearch(action) {
  const token = yield select(state => state.tokenReducer.token); // –º–æ–∂–Ω–æ —Ç–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ state
  const {data} = yield call(fetchSearch, action.searchText, token);
  // const data = yield fetchSearch(action);
  yield put(searchRequestSuccess(data)); // put –∑–∞–º–µ–Ω—è–µ—Ç dispatch
  // console.log('workerSearch data: ', data);
}

function* fetchSearch(searchText){
  const token = yield select(state => state.tokenReducer.token);
  const url = `${URL_API}/search?q=${searchText}&limit=3`;
  console.log(`token:${token.length} fetchSearch: url`, url);

  try{
    const request = yield axios(url,
      {
        headers: {
          Authorization: `bearer ${token}`,
        },
      }
    );
    yield put(searchRequestSuccess(request.data));

  }catch(e){
    yield put(searchRequesError(e));
  }
};

// –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å fetchSearch –±–µ–∑ workerSearch –Ω–æ —Ç–æ–≥–¥–∞ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º* –∏ –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
export function* watchSearchSaga() {
  yield takeLatest(SEARCH_REQUEST, fetchSearch);
}
// export function* watchSearchSaga() {
//   // yield takeEvery(SEARCH_REQUEST, workerSearch); // –±—É–±—É—Ç –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã.
//   yield takeLatest(SEARCH_REQUEST, workerSearch); // –±—É–¥–µ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π. –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ä–≤—É—Ç—Å—è
// }
